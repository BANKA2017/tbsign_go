// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/BANKA2017/tbsign_go/dao/model"
)

func newTcVer4RankLog(db *gorm.DB, opts ...gen.DOOption) tcVer4RankLog {
	_tcVer4RankLog := tcVer4RankLog{}

	_tcVer4RankLog.tcVer4RankLogDo.UseDB(db, opts...)
	_tcVer4RankLog.tcVer4RankLogDo.UseModel(&model.TcVer4RankLog{})

	tableName := _tcVer4RankLog.tcVer4RankLogDo.TableName()
	_tcVer4RankLog.ALL = field.NewAsterisk(tableName)
	_tcVer4RankLog.ID = field.NewInt32(tableName, "id")
	_tcVer4RankLog.UID = field.NewInt32(tableName, "uid")
	_tcVer4RankLog.Pid = field.NewInt32(tableName, "pid")
	_tcVer4RankLog.Fid = field.NewInt32(tableName, "fid")
	_tcVer4RankLog.Nid = field.NewString(tableName, "nid")
	_tcVer4RankLog.Name = field.NewString(tableName, "name")
	_tcVer4RankLog.Tieba = field.NewString(tableName, "tieba")
	_tcVer4RankLog.Log = field.NewString(tableName, "log")
	_tcVer4RankLog.Date = field.NewInt32(tableName, "date")

	_tcVer4RankLog.fillFieldMap()

	return _tcVer4RankLog
}

type tcVer4RankLog struct {
	tcVer4RankLogDo tcVer4RankLogDo

	ALL   field.Asterisk
	ID    field.Int32
	UID   field.Int32
	Pid   field.Int32
	Fid   field.Int32
	Nid   field.String
	Name  field.String
	Tieba field.String
	Log   field.String
	Date  field.Int32

	fieldMap map[string]field.Expr
}

func (t tcVer4RankLog) Table(newTableName string) *tcVer4RankLog {
	t.tcVer4RankLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tcVer4RankLog) As(alias string) *tcVer4RankLog {
	t.tcVer4RankLogDo.DO = *(t.tcVer4RankLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tcVer4RankLog) updateTableName(table string) *tcVer4RankLog {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.UID = field.NewInt32(table, "uid")
	t.Pid = field.NewInt32(table, "pid")
	t.Fid = field.NewInt32(table, "fid")
	t.Nid = field.NewString(table, "nid")
	t.Name = field.NewString(table, "name")
	t.Tieba = field.NewString(table, "tieba")
	t.Log = field.NewString(table, "log")
	t.Date = field.NewInt32(table, "date")

	t.fillFieldMap()

	return t
}

func (t *tcVer4RankLog) WithContext(ctx context.Context) *tcVer4RankLogDo {
	return t.tcVer4RankLogDo.WithContext(ctx)
}

func (t tcVer4RankLog) TableName() string { return t.tcVer4RankLogDo.TableName() }

func (t tcVer4RankLog) Alias() string { return t.tcVer4RankLogDo.Alias() }

func (t tcVer4RankLog) Columns(cols ...field.Expr) gen.Columns {
	return t.tcVer4RankLogDo.Columns(cols...)
}

func (t *tcVer4RankLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tcVer4RankLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["uid"] = t.UID
	t.fieldMap["pid"] = t.Pid
	t.fieldMap["fid"] = t.Fid
	t.fieldMap["nid"] = t.Nid
	t.fieldMap["name"] = t.Name
	t.fieldMap["tieba"] = t.Tieba
	t.fieldMap["log"] = t.Log
	t.fieldMap["date"] = t.Date
}

func (t tcVer4RankLog) clone(db *gorm.DB) tcVer4RankLog {
	t.tcVer4RankLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tcVer4RankLog) replaceDB(db *gorm.DB) tcVer4RankLog {
	t.tcVer4RankLogDo.ReplaceDB(db)
	return t
}

type tcVer4RankLogDo struct{ gen.DO }

func (t tcVer4RankLogDo) Debug() *tcVer4RankLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tcVer4RankLogDo) WithContext(ctx context.Context) *tcVer4RankLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tcVer4RankLogDo) ReadDB() *tcVer4RankLogDo {
	return t.Clauses(dbresolver.Read)
}

func (t tcVer4RankLogDo) WriteDB() *tcVer4RankLogDo {
	return t.Clauses(dbresolver.Write)
}

func (t tcVer4RankLogDo) Session(config *gorm.Session) *tcVer4RankLogDo {
	return t.withDO(t.DO.Session(config))
}

func (t tcVer4RankLogDo) Clauses(conds ...clause.Expression) *tcVer4RankLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tcVer4RankLogDo) Returning(value interface{}, columns ...string) *tcVer4RankLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tcVer4RankLogDo) Not(conds ...gen.Condition) *tcVer4RankLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tcVer4RankLogDo) Or(conds ...gen.Condition) *tcVer4RankLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tcVer4RankLogDo) Select(conds ...field.Expr) *tcVer4RankLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tcVer4RankLogDo) Where(conds ...gen.Condition) *tcVer4RankLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tcVer4RankLogDo) Order(conds ...field.Expr) *tcVer4RankLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tcVer4RankLogDo) Distinct(cols ...field.Expr) *tcVer4RankLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tcVer4RankLogDo) Omit(cols ...field.Expr) *tcVer4RankLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tcVer4RankLogDo) Join(table schema.Tabler, on ...field.Expr) *tcVer4RankLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tcVer4RankLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tcVer4RankLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tcVer4RankLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *tcVer4RankLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tcVer4RankLogDo) Group(cols ...field.Expr) *tcVer4RankLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tcVer4RankLogDo) Having(conds ...gen.Condition) *tcVer4RankLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tcVer4RankLogDo) Limit(limit int) *tcVer4RankLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tcVer4RankLogDo) Offset(offset int) *tcVer4RankLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tcVer4RankLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tcVer4RankLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tcVer4RankLogDo) Unscoped() *tcVer4RankLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tcVer4RankLogDo) Create(values ...*model.TcVer4RankLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tcVer4RankLogDo) CreateInBatches(values []*model.TcVer4RankLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tcVer4RankLogDo) Save(values ...*model.TcVer4RankLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tcVer4RankLogDo) First() (*model.TcVer4RankLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcVer4RankLog), nil
	}
}

func (t tcVer4RankLogDo) Take() (*model.TcVer4RankLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcVer4RankLog), nil
	}
}

func (t tcVer4RankLogDo) Last() (*model.TcVer4RankLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcVer4RankLog), nil
	}
}

func (t tcVer4RankLogDo) Find() ([]*model.TcVer4RankLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TcVer4RankLog), err
}

func (t tcVer4RankLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TcVer4RankLog, err error) {
	buf := make([]*model.TcVer4RankLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tcVer4RankLogDo) FindInBatches(result *[]*model.TcVer4RankLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tcVer4RankLogDo) Attrs(attrs ...field.AssignExpr) *tcVer4RankLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tcVer4RankLogDo) Assign(attrs ...field.AssignExpr) *tcVer4RankLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tcVer4RankLogDo) Joins(fields ...field.RelationField) *tcVer4RankLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tcVer4RankLogDo) Preload(fields ...field.RelationField) *tcVer4RankLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tcVer4RankLogDo) FirstOrInit() (*model.TcVer4RankLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcVer4RankLog), nil
	}
}

func (t tcVer4RankLogDo) FirstOrCreate() (*model.TcVer4RankLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcVer4RankLog), nil
	}
}

func (t tcVer4RankLogDo) FindByPage(offset int, limit int) (result []*model.TcVer4RankLog, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tcVer4RankLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tcVer4RankLogDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tcVer4RankLogDo) Delete(models ...*model.TcVer4RankLog) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tcVer4RankLogDo) withDO(do gen.Dao) *tcVer4RankLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
