// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/BANKA2017/tbsign_go/dao/model"
)

func newTcUser(db *gorm.DB, opts ...gen.DOOption) tcUser {
	_tcUser := tcUser{}

	_tcUser.tcUserDo.UseDB(db, opts...)
	_tcUser.tcUserDo.UseModel(&model.TcUser{})

	tableName := _tcUser.tcUserDo.TableName()
	_tcUser.ALL = field.NewAsterisk(tableName)
	_tcUser.ID = field.NewInt32(tableName, "id")
	_tcUser.Name = field.NewString(tableName, "name")
	_tcUser.Pw = field.NewString(tableName, "pw")
	_tcUser.Email = field.NewString(tableName, "email")
	_tcUser.Role = field.NewString(tableName, "role")
	_tcUser.T = field.NewString(tableName, "t")

	_tcUser.fillFieldMap()

	return _tcUser
}

type tcUser struct {
	tcUserDo tcUserDo

	ALL   field.Asterisk
	ID    field.Int32
	Name  field.String
	Pw    field.String
	Email field.String
	Role  field.String
	T     field.String

	fieldMap map[string]field.Expr
}

func (t tcUser) Table(newTableName string) *tcUser {
	t.tcUserDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tcUser) As(alias string) *tcUser {
	t.tcUserDo.DO = *(t.tcUserDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tcUser) updateTableName(table string) *tcUser {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.Pw = field.NewString(table, "pw")
	t.Email = field.NewString(table, "email")
	t.Role = field.NewString(table, "role")
	t.T = field.NewString(table, "t")

	t.fillFieldMap()

	return t
}

func (t *tcUser) WithContext(ctx context.Context) *tcUserDo { return t.tcUserDo.WithContext(ctx) }

func (t tcUser) TableName() string { return t.tcUserDo.TableName() }

func (t tcUser) Alias() string { return t.tcUserDo.Alias() }

func (t tcUser) Columns(cols ...field.Expr) gen.Columns { return t.tcUserDo.Columns(cols...) }

func (t *tcUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tcUser) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["pw"] = t.Pw
	t.fieldMap["email"] = t.Email
	t.fieldMap["role"] = t.Role
	t.fieldMap["t"] = t.T
}

func (t tcUser) clone(db *gorm.DB) tcUser {
	t.tcUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tcUser) replaceDB(db *gorm.DB) tcUser {
	t.tcUserDo.ReplaceDB(db)
	return t
}

type tcUserDo struct{ gen.DO }

func (t tcUserDo) Debug() *tcUserDo {
	return t.withDO(t.DO.Debug())
}

func (t tcUserDo) WithContext(ctx context.Context) *tcUserDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tcUserDo) ReadDB() *tcUserDo {
	return t.Clauses(dbresolver.Read)
}

func (t tcUserDo) WriteDB() *tcUserDo {
	return t.Clauses(dbresolver.Write)
}

func (t tcUserDo) Session(config *gorm.Session) *tcUserDo {
	return t.withDO(t.DO.Session(config))
}

func (t tcUserDo) Clauses(conds ...clause.Expression) *tcUserDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tcUserDo) Returning(value interface{}, columns ...string) *tcUserDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tcUserDo) Not(conds ...gen.Condition) *tcUserDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tcUserDo) Or(conds ...gen.Condition) *tcUserDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tcUserDo) Select(conds ...field.Expr) *tcUserDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tcUserDo) Where(conds ...gen.Condition) *tcUserDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tcUserDo) Order(conds ...field.Expr) *tcUserDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tcUserDo) Distinct(cols ...field.Expr) *tcUserDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tcUserDo) Omit(cols ...field.Expr) *tcUserDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tcUserDo) Join(table schema.Tabler, on ...field.Expr) *tcUserDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tcUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tcUserDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tcUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *tcUserDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tcUserDo) Group(cols ...field.Expr) *tcUserDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tcUserDo) Having(conds ...gen.Condition) *tcUserDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tcUserDo) Limit(limit int) *tcUserDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tcUserDo) Offset(offset int) *tcUserDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tcUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tcUserDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tcUserDo) Unscoped() *tcUserDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tcUserDo) Create(values ...*model.TcUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tcUserDo) CreateInBatches(values []*model.TcUser, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tcUserDo) Save(values ...*model.TcUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tcUserDo) First() (*model.TcUser, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcUser), nil
	}
}

func (t tcUserDo) Take() (*model.TcUser, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcUser), nil
	}
}

func (t tcUserDo) Last() (*model.TcUser, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcUser), nil
	}
}

func (t tcUserDo) Find() ([]*model.TcUser, error) {
	result, err := t.DO.Find()
	return result.([]*model.TcUser), err
}

func (t tcUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TcUser, err error) {
	buf := make([]*model.TcUser, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tcUserDo) FindInBatches(result *[]*model.TcUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tcUserDo) Attrs(attrs ...field.AssignExpr) *tcUserDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tcUserDo) Assign(attrs ...field.AssignExpr) *tcUserDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tcUserDo) Joins(fields ...field.RelationField) *tcUserDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tcUserDo) Preload(fields ...field.RelationField) *tcUserDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tcUserDo) FirstOrInit() (*model.TcUser, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcUser), nil
	}
}

func (t tcUserDo) FirstOrCreate() (*model.TcUser, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcUser), nil
	}
}

func (t tcUserDo) FindByPage(offset int, limit int) (result []*model.TcUser, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tcUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tcUserDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tcUserDo) Delete(models ...*model.TcUser) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tcUserDo) withDO(do gen.Dao) *tcUserDo {
	t.DO = *do.(*gen.DO)
	return t
}
