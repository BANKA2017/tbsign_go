// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/BANKA2017/tbsign_go/dao/model"
)

func newTcTieba(db *gorm.DB, opts ...gen.DOOption) tcTieba {
	_tcTieba := tcTieba{}

	_tcTieba.tcTiebaDo.UseDB(db, opts...)
	_tcTieba.tcTiebaDo.UseModel(&model.TcTieba{})

	tableName := _tcTieba.tcTiebaDo.TableName()
	_tcTieba.ALL = field.NewAsterisk(tableName)
	_tcTieba.ID = field.NewInt32(tableName, "id")
	_tcTieba.UID = field.NewInt32(tableName, "uid")
	_tcTieba.Pid = field.NewInt32(tableName, "pid")
	_tcTieba.Fid = field.NewInt32(tableName, "fid")
	_tcTieba.Tieba = field.NewString(tableName, "tieba")
	_tcTieba.No = field.NewBool(tableName, "no")
	_tcTieba.Status = field.NewInt32(tableName, "status")
	_tcTieba.Latest = field.NewInt32(tableName, "latest")
	_tcTieba.LastError = field.NewString(tableName, "last_error")

	_tcTieba.fillFieldMap()

	return _tcTieba
}

type tcTieba struct {
	tcTiebaDo tcTiebaDo

	ALL       field.Asterisk
	ID        field.Int32
	UID       field.Int32
	Pid       field.Int32
	Fid       field.Int32
	Tieba     field.String
	No        field.Bool
	Status    field.Int32
	Latest    field.Int32
	LastError field.String

	fieldMap map[string]field.Expr
}

func (t tcTieba) Table(newTableName string) *tcTieba {
	t.tcTiebaDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tcTieba) As(alias string) *tcTieba {
	t.tcTiebaDo.DO = *(t.tcTiebaDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tcTieba) updateTableName(table string) *tcTieba {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.UID = field.NewInt32(table, "uid")
	t.Pid = field.NewInt32(table, "pid")
	t.Fid = field.NewInt32(table, "fid")
	t.Tieba = field.NewString(table, "tieba")
	t.No = field.NewBool(table, "no")
	t.Status = field.NewInt32(table, "status")
	t.Latest = field.NewInt32(table, "latest")
	t.LastError = field.NewString(table, "last_error")

	t.fillFieldMap()

	return t
}

func (t *tcTieba) WithContext(ctx context.Context) *tcTiebaDo { return t.tcTiebaDo.WithContext(ctx) }

func (t tcTieba) TableName() string { return t.tcTiebaDo.TableName() }

func (t tcTieba) Alias() string { return t.tcTiebaDo.Alias() }

func (t tcTieba) Columns(cols ...field.Expr) gen.Columns { return t.tcTiebaDo.Columns(cols...) }

func (t *tcTieba) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tcTieba) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["uid"] = t.UID
	t.fieldMap["pid"] = t.Pid
	t.fieldMap["fid"] = t.Fid
	t.fieldMap["tieba"] = t.Tieba
	t.fieldMap["no"] = t.No
	t.fieldMap["status"] = t.Status
	t.fieldMap["latest"] = t.Latest
	t.fieldMap["last_error"] = t.LastError
}

func (t tcTieba) clone(db *gorm.DB) tcTieba {
	t.tcTiebaDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tcTieba) replaceDB(db *gorm.DB) tcTieba {
	t.tcTiebaDo.ReplaceDB(db)
	return t
}

type tcTiebaDo struct{ gen.DO }

func (t tcTiebaDo) Debug() *tcTiebaDo {
	return t.withDO(t.DO.Debug())
}

func (t tcTiebaDo) WithContext(ctx context.Context) *tcTiebaDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tcTiebaDo) ReadDB() *tcTiebaDo {
	return t.Clauses(dbresolver.Read)
}

func (t tcTiebaDo) WriteDB() *tcTiebaDo {
	return t.Clauses(dbresolver.Write)
}

func (t tcTiebaDo) Session(config *gorm.Session) *tcTiebaDo {
	return t.withDO(t.DO.Session(config))
}

func (t tcTiebaDo) Clauses(conds ...clause.Expression) *tcTiebaDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tcTiebaDo) Returning(value interface{}, columns ...string) *tcTiebaDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tcTiebaDo) Not(conds ...gen.Condition) *tcTiebaDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tcTiebaDo) Or(conds ...gen.Condition) *tcTiebaDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tcTiebaDo) Select(conds ...field.Expr) *tcTiebaDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tcTiebaDo) Where(conds ...gen.Condition) *tcTiebaDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tcTiebaDo) Order(conds ...field.Expr) *tcTiebaDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tcTiebaDo) Distinct(cols ...field.Expr) *tcTiebaDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tcTiebaDo) Omit(cols ...field.Expr) *tcTiebaDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tcTiebaDo) Join(table schema.Tabler, on ...field.Expr) *tcTiebaDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tcTiebaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tcTiebaDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tcTiebaDo) RightJoin(table schema.Tabler, on ...field.Expr) *tcTiebaDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tcTiebaDo) Group(cols ...field.Expr) *tcTiebaDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tcTiebaDo) Having(conds ...gen.Condition) *tcTiebaDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tcTiebaDo) Limit(limit int) *tcTiebaDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tcTiebaDo) Offset(offset int) *tcTiebaDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tcTiebaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tcTiebaDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tcTiebaDo) Unscoped() *tcTiebaDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tcTiebaDo) Create(values ...*model.TcTieba) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tcTiebaDo) CreateInBatches(values []*model.TcTieba, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tcTiebaDo) Save(values ...*model.TcTieba) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tcTiebaDo) First() (*model.TcTieba, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcTieba), nil
	}
}

func (t tcTiebaDo) Take() (*model.TcTieba, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcTieba), nil
	}
}

func (t tcTiebaDo) Last() (*model.TcTieba, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcTieba), nil
	}
}

func (t tcTiebaDo) Find() ([]*model.TcTieba, error) {
	result, err := t.DO.Find()
	return result.([]*model.TcTieba), err
}

func (t tcTiebaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TcTieba, err error) {
	buf := make([]*model.TcTieba, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tcTiebaDo) FindInBatches(result *[]*model.TcTieba, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tcTiebaDo) Attrs(attrs ...field.AssignExpr) *tcTiebaDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tcTiebaDo) Assign(attrs ...field.AssignExpr) *tcTiebaDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tcTiebaDo) Joins(fields ...field.RelationField) *tcTiebaDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tcTiebaDo) Preload(fields ...field.RelationField) *tcTiebaDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tcTiebaDo) FirstOrInit() (*model.TcTieba, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcTieba), nil
	}
}

func (t tcTiebaDo) FirstOrCreate() (*model.TcTieba, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcTieba), nil
	}
}

func (t tcTiebaDo) FindByPage(offset int, limit int) (result []*model.TcTieba, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tcTiebaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tcTiebaDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tcTiebaDo) Delete(models ...*model.TcTieba) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tcTiebaDo) withDO(do gen.Dao) *tcTiebaDo {
	t.DO = *do.(*gen.DO)
	return t
}
