// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/BANKA2017/tbsign_go/dao/model"
)

func newTcBaiduid(db *gorm.DB, opts ...gen.DOOption) tcBaiduid {
	_tcBaiduid := tcBaiduid{}

	_tcBaiduid.tcBaiduidDo.UseDB(db, opts...)
	_tcBaiduid.tcBaiduidDo.UseModel(&model.TcBaiduid{})

	tableName := _tcBaiduid.tcBaiduidDo.TableName()
	_tcBaiduid.ALL = field.NewAsterisk(tableName)
	_tcBaiduid.ID = field.NewInt32(tableName, "id")
	_tcBaiduid.UID = field.NewInt32(tableName, "uid")
	_tcBaiduid.Bduss = field.NewString(tableName, "bduss")
	_tcBaiduid.Stoken = field.NewString(tableName, "stoken")
	_tcBaiduid.Name = field.NewString(tableName, "name")
	_tcBaiduid.Portrait = field.NewString(tableName, "portrait")

	_tcBaiduid.fillFieldMap()

	return _tcBaiduid
}

type tcBaiduid struct {
	tcBaiduidDo tcBaiduidDo

	ALL      field.Asterisk
	ID       field.Int32
	UID      field.Int32
	Bduss    field.String
	Stoken   field.String
	Name     field.String
	Portrait field.String

	fieldMap map[string]field.Expr
}

func (t tcBaiduid) Table(newTableName string) *tcBaiduid {
	t.tcBaiduidDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tcBaiduid) As(alias string) *tcBaiduid {
	t.tcBaiduidDo.DO = *(t.tcBaiduidDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tcBaiduid) updateTableName(table string) *tcBaiduid {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.UID = field.NewInt32(table, "uid")
	t.Bduss = field.NewString(table, "bduss")
	t.Stoken = field.NewString(table, "stoken")
	t.Name = field.NewString(table, "name")
	t.Portrait = field.NewString(table, "portrait")

	t.fillFieldMap()

	return t
}

func (t *tcBaiduid) WithContext(ctx context.Context) *tcBaiduidDo {
	return t.tcBaiduidDo.WithContext(ctx)
}

func (t tcBaiduid) TableName() string { return t.tcBaiduidDo.TableName() }

func (t tcBaiduid) Alias() string { return t.tcBaiduidDo.Alias() }

func (t tcBaiduid) Columns(cols ...field.Expr) gen.Columns { return t.tcBaiduidDo.Columns(cols...) }

func (t *tcBaiduid) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tcBaiduid) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["uid"] = t.UID
	t.fieldMap["bduss"] = t.Bduss
	t.fieldMap["stoken"] = t.Stoken
	t.fieldMap["name"] = t.Name
	t.fieldMap["portrait"] = t.Portrait
}

func (t tcBaiduid) clone(db *gorm.DB) tcBaiduid {
	t.tcBaiduidDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tcBaiduid) replaceDB(db *gorm.DB) tcBaiduid {
	t.tcBaiduidDo.ReplaceDB(db)
	return t
}

type tcBaiduidDo struct{ gen.DO }

func (t tcBaiduidDo) Debug() *tcBaiduidDo {
	return t.withDO(t.DO.Debug())
}

func (t tcBaiduidDo) WithContext(ctx context.Context) *tcBaiduidDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tcBaiduidDo) ReadDB() *tcBaiduidDo {
	return t.Clauses(dbresolver.Read)
}

func (t tcBaiduidDo) WriteDB() *tcBaiduidDo {
	return t.Clauses(dbresolver.Write)
}

func (t tcBaiduidDo) Session(config *gorm.Session) *tcBaiduidDo {
	return t.withDO(t.DO.Session(config))
}

func (t tcBaiduidDo) Clauses(conds ...clause.Expression) *tcBaiduidDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tcBaiduidDo) Returning(value interface{}, columns ...string) *tcBaiduidDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tcBaiduidDo) Not(conds ...gen.Condition) *tcBaiduidDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tcBaiduidDo) Or(conds ...gen.Condition) *tcBaiduidDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tcBaiduidDo) Select(conds ...field.Expr) *tcBaiduidDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tcBaiduidDo) Where(conds ...gen.Condition) *tcBaiduidDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tcBaiduidDo) Order(conds ...field.Expr) *tcBaiduidDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tcBaiduidDo) Distinct(cols ...field.Expr) *tcBaiduidDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tcBaiduidDo) Omit(cols ...field.Expr) *tcBaiduidDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tcBaiduidDo) Join(table schema.Tabler, on ...field.Expr) *tcBaiduidDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tcBaiduidDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tcBaiduidDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tcBaiduidDo) RightJoin(table schema.Tabler, on ...field.Expr) *tcBaiduidDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tcBaiduidDo) Group(cols ...field.Expr) *tcBaiduidDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tcBaiduidDo) Having(conds ...gen.Condition) *tcBaiduidDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tcBaiduidDo) Limit(limit int) *tcBaiduidDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tcBaiduidDo) Offset(offset int) *tcBaiduidDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tcBaiduidDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tcBaiduidDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tcBaiduidDo) Unscoped() *tcBaiduidDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tcBaiduidDo) Create(values ...*model.TcBaiduid) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tcBaiduidDo) CreateInBatches(values []*model.TcBaiduid, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tcBaiduidDo) Save(values ...*model.TcBaiduid) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tcBaiduidDo) First() (*model.TcBaiduid, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcBaiduid), nil
	}
}

func (t tcBaiduidDo) Take() (*model.TcBaiduid, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcBaiduid), nil
	}
}

func (t tcBaiduidDo) Last() (*model.TcBaiduid, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcBaiduid), nil
	}
}

func (t tcBaiduidDo) Find() ([]*model.TcBaiduid, error) {
	result, err := t.DO.Find()
	return result.([]*model.TcBaiduid), err
}

func (t tcBaiduidDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TcBaiduid, err error) {
	buf := make([]*model.TcBaiduid, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tcBaiduidDo) FindInBatches(result *[]*model.TcBaiduid, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tcBaiduidDo) Attrs(attrs ...field.AssignExpr) *tcBaiduidDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tcBaiduidDo) Assign(attrs ...field.AssignExpr) *tcBaiduidDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tcBaiduidDo) Joins(fields ...field.RelationField) *tcBaiduidDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tcBaiduidDo) Preload(fields ...field.RelationField) *tcBaiduidDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tcBaiduidDo) FirstOrInit() (*model.TcBaiduid, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcBaiduid), nil
	}
}

func (t tcBaiduidDo) FirstOrCreate() (*model.TcBaiduid, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcBaiduid), nil
	}
}

func (t tcBaiduidDo) FindByPage(offset int, limit int) (result []*model.TcBaiduid, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tcBaiduidDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tcBaiduidDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tcBaiduidDo) Delete(models ...*model.TcBaiduid) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tcBaiduidDo) withDO(do gen.Dao) *tcBaiduidDo {
	t.DO = *do.(*gen.DO)
	return t
}
