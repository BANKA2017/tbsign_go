// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/BANKA2017/tbsign_go/dao/model"
)

func newTcVer4LotteryLog(db *gorm.DB, opts ...gen.DOOption) tcVer4LotteryLog {
	_tcVer4LotteryLog := tcVer4LotteryLog{}

	_tcVer4LotteryLog.tcVer4LotteryLogDo.UseDB(db, opts...)
	_tcVer4LotteryLog.tcVer4LotteryLogDo.UseModel(&model.TcVer4LotteryLog{})

	tableName := _tcVer4LotteryLog.tcVer4LotteryLogDo.TableName()
	_tcVer4LotteryLog.ALL = field.NewAsterisk(tableName)
	_tcVer4LotteryLog.ID = field.NewInt32(tableName, "id")
	_tcVer4LotteryLog.UID = field.NewInt32(tableName, "uid")
	_tcVer4LotteryLog.Pid = field.NewInt32(tableName, "pid")
	_tcVer4LotteryLog.Result = field.NewString(tableName, "result")
	_tcVer4LotteryLog.Prize = field.NewString(tableName, "prize")
	_tcVer4LotteryLog.Date = field.NewInt32(tableName, "date")

	_tcVer4LotteryLog.fillFieldMap()

	return _tcVer4LotteryLog
}

type tcVer4LotteryLog struct {
	tcVer4LotteryLogDo tcVer4LotteryLogDo

	ALL    field.Asterisk
	ID     field.Int32
	UID    field.Int32
	Pid    field.Int32
	Result field.String
	Prize  field.String
	Date   field.Int32

	fieldMap map[string]field.Expr
}

func (t tcVer4LotteryLog) Table(newTableName string) *tcVer4LotteryLog {
	t.tcVer4LotteryLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tcVer4LotteryLog) As(alias string) *tcVer4LotteryLog {
	t.tcVer4LotteryLogDo.DO = *(t.tcVer4LotteryLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tcVer4LotteryLog) updateTableName(table string) *tcVer4LotteryLog {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.UID = field.NewInt32(table, "uid")
	t.Pid = field.NewInt32(table, "pid")
	t.Result = field.NewString(table, "result")
	t.Prize = field.NewString(table, "prize")
	t.Date = field.NewInt32(table, "date")

	t.fillFieldMap()

	return t
}

func (t *tcVer4LotteryLog) WithContext(ctx context.Context) *tcVer4LotteryLogDo {
	return t.tcVer4LotteryLogDo.WithContext(ctx)
}

func (t tcVer4LotteryLog) TableName() string { return t.tcVer4LotteryLogDo.TableName() }

func (t tcVer4LotteryLog) Alias() string { return t.tcVer4LotteryLogDo.Alias() }

func (t tcVer4LotteryLog) Columns(cols ...field.Expr) gen.Columns {
	return t.tcVer4LotteryLogDo.Columns(cols...)
}

func (t *tcVer4LotteryLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tcVer4LotteryLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["uid"] = t.UID
	t.fieldMap["pid"] = t.Pid
	t.fieldMap["result"] = t.Result
	t.fieldMap["prize"] = t.Prize
	t.fieldMap["date"] = t.Date
}

func (t tcVer4LotteryLog) clone(db *gorm.DB) tcVer4LotteryLog {
	t.tcVer4LotteryLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tcVer4LotteryLog) replaceDB(db *gorm.DB) tcVer4LotteryLog {
	t.tcVer4LotteryLogDo.ReplaceDB(db)
	return t
}

type tcVer4LotteryLogDo struct{ gen.DO }

func (t tcVer4LotteryLogDo) Debug() *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tcVer4LotteryLogDo) WithContext(ctx context.Context) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tcVer4LotteryLogDo) ReadDB() *tcVer4LotteryLogDo {
	return t.Clauses(dbresolver.Read)
}

func (t tcVer4LotteryLogDo) WriteDB() *tcVer4LotteryLogDo {
	return t.Clauses(dbresolver.Write)
}

func (t tcVer4LotteryLogDo) Session(config *gorm.Session) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Session(config))
}

func (t tcVer4LotteryLogDo) Clauses(conds ...clause.Expression) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tcVer4LotteryLogDo) Returning(value interface{}, columns ...string) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tcVer4LotteryLogDo) Not(conds ...gen.Condition) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tcVer4LotteryLogDo) Or(conds ...gen.Condition) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tcVer4LotteryLogDo) Select(conds ...field.Expr) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tcVer4LotteryLogDo) Where(conds ...gen.Condition) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tcVer4LotteryLogDo) Order(conds ...field.Expr) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tcVer4LotteryLogDo) Distinct(cols ...field.Expr) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tcVer4LotteryLogDo) Omit(cols ...field.Expr) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tcVer4LotteryLogDo) Join(table schema.Tabler, on ...field.Expr) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tcVer4LotteryLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tcVer4LotteryLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tcVer4LotteryLogDo) Group(cols ...field.Expr) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tcVer4LotteryLogDo) Having(conds ...gen.Condition) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tcVer4LotteryLogDo) Limit(limit int) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tcVer4LotteryLogDo) Offset(offset int) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tcVer4LotteryLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tcVer4LotteryLogDo) Unscoped() *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tcVer4LotteryLogDo) Create(values ...*model.TcVer4LotteryLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tcVer4LotteryLogDo) CreateInBatches(values []*model.TcVer4LotteryLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tcVer4LotteryLogDo) Save(values ...*model.TcVer4LotteryLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tcVer4LotteryLogDo) First() (*model.TcVer4LotteryLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcVer4LotteryLog), nil
	}
}

func (t tcVer4LotteryLogDo) Take() (*model.TcVer4LotteryLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcVer4LotteryLog), nil
	}
}

func (t tcVer4LotteryLogDo) Last() (*model.TcVer4LotteryLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcVer4LotteryLog), nil
	}
}

func (t tcVer4LotteryLogDo) Find() ([]*model.TcVer4LotteryLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TcVer4LotteryLog), err
}

func (t tcVer4LotteryLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TcVer4LotteryLog, err error) {
	buf := make([]*model.TcVer4LotteryLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tcVer4LotteryLogDo) FindInBatches(result *[]*model.TcVer4LotteryLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tcVer4LotteryLogDo) Attrs(attrs ...field.AssignExpr) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tcVer4LotteryLogDo) Assign(attrs ...field.AssignExpr) *tcVer4LotteryLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tcVer4LotteryLogDo) Joins(fields ...field.RelationField) *tcVer4LotteryLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tcVer4LotteryLogDo) Preload(fields ...field.RelationField) *tcVer4LotteryLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tcVer4LotteryLogDo) FirstOrInit() (*model.TcVer4LotteryLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcVer4LotteryLog), nil
	}
}

func (t tcVer4LotteryLogDo) FirstOrCreate() (*model.TcVer4LotteryLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcVer4LotteryLog), nil
	}
}

func (t tcVer4LotteryLogDo) FindByPage(offset int, limit int) (result []*model.TcVer4LotteryLog, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tcVer4LotteryLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tcVer4LotteryLogDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tcVer4LotteryLogDo) Delete(models ...*model.TcVer4LotteryLog) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tcVer4LotteryLogDo) withDO(do gen.Dao) *tcVer4LotteryLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
