// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/BANKA2017/tbsign_go/dao/model"
)

func newTcPlugin(db *gorm.DB, opts ...gen.DOOption) tcPlugin {
	_tcPlugin := tcPlugin{}

	_tcPlugin.tcPluginDo.UseDB(db, opts...)
	_tcPlugin.tcPluginDo.UseModel(&model.TcPlugin{})

	tableName := _tcPlugin.tcPluginDo.TableName()
	_tcPlugin.ALL = field.NewAsterisk(tableName)
	_tcPlugin.Name = field.NewString(tableName, "name")
	_tcPlugin.Status = field.NewBool(tableName, "status")
	_tcPlugin.Ver = field.NewString(tableName, "ver")
	_tcPlugin.Options = field.NewString(tableName, "options")
	_tcPlugin.Order = field.NewInt32(tableName, "order")

	_tcPlugin.fillFieldMap()

	return _tcPlugin
}

type tcPlugin struct {
	tcPluginDo tcPluginDo

	ALL     field.Asterisk
	Name    field.String
	Status  field.Bool
	Ver     field.String
	Options field.String
	Order   field.Int32

	fieldMap map[string]field.Expr
}

func (t tcPlugin) Table(newTableName string) *tcPlugin {
	t.tcPluginDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tcPlugin) As(alias string) *tcPlugin {
	t.tcPluginDo.DO = *(t.tcPluginDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tcPlugin) updateTableName(table string) *tcPlugin {
	t.ALL = field.NewAsterisk(table)
	t.Name = field.NewString(table, "name")
	t.Status = field.NewBool(table, "status")
	t.Ver = field.NewString(table, "ver")
	t.Options = field.NewString(table, "options")
	t.Order = field.NewInt32(table, "order")

	t.fillFieldMap()

	return t
}

func (t *tcPlugin) WithContext(ctx context.Context) *tcPluginDo { return t.tcPluginDo.WithContext(ctx) }

func (t tcPlugin) TableName() string { return t.tcPluginDo.TableName() }

func (t tcPlugin) Alias() string { return t.tcPluginDo.Alias() }

func (t tcPlugin) Columns(cols ...field.Expr) gen.Columns { return t.tcPluginDo.Columns(cols...) }

func (t *tcPlugin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tcPlugin) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["name"] = t.Name
	t.fieldMap["status"] = t.Status
	t.fieldMap["ver"] = t.Ver
	t.fieldMap["options"] = t.Options
	t.fieldMap["order"] = t.Order
}

func (t tcPlugin) clone(db *gorm.DB) tcPlugin {
	t.tcPluginDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tcPlugin) replaceDB(db *gorm.DB) tcPlugin {
	t.tcPluginDo.ReplaceDB(db)
	return t
}

type tcPluginDo struct{ gen.DO }

func (t tcPluginDo) Debug() *tcPluginDo {
	return t.withDO(t.DO.Debug())
}

func (t tcPluginDo) WithContext(ctx context.Context) *tcPluginDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tcPluginDo) ReadDB() *tcPluginDo {
	return t.Clauses(dbresolver.Read)
}

func (t tcPluginDo) WriteDB() *tcPluginDo {
	return t.Clauses(dbresolver.Write)
}

func (t tcPluginDo) Session(config *gorm.Session) *tcPluginDo {
	return t.withDO(t.DO.Session(config))
}

func (t tcPluginDo) Clauses(conds ...clause.Expression) *tcPluginDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tcPluginDo) Returning(value interface{}, columns ...string) *tcPluginDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tcPluginDo) Not(conds ...gen.Condition) *tcPluginDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tcPluginDo) Or(conds ...gen.Condition) *tcPluginDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tcPluginDo) Select(conds ...field.Expr) *tcPluginDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tcPluginDo) Where(conds ...gen.Condition) *tcPluginDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tcPluginDo) Order(conds ...field.Expr) *tcPluginDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tcPluginDo) Distinct(cols ...field.Expr) *tcPluginDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tcPluginDo) Omit(cols ...field.Expr) *tcPluginDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tcPluginDo) Join(table schema.Tabler, on ...field.Expr) *tcPluginDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tcPluginDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tcPluginDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tcPluginDo) RightJoin(table schema.Tabler, on ...field.Expr) *tcPluginDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tcPluginDo) Group(cols ...field.Expr) *tcPluginDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tcPluginDo) Having(conds ...gen.Condition) *tcPluginDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tcPluginDo) Limit(limit int) *tcPluginDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tcPluginDo) Offset(offset int) *tcPluginDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tcPluginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tcPluginDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tcPluginDo) Unscoped() *tcPluginDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tcPluginDo) Create(values ...*model.TcPlugin) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tcPluginDo) CreateInBatches(values []*model.TcPlugin, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tcPluginDo) Save(values ...*model.TcPlugin) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tcPluginDo) First() (*model.TcPlugin, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcPlugin), nil
	}
}

func (t tcPluginDo) Take() (*model.TcPlugin, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcPlugin), nil
	}
}

func (t tcPluginDo) Last() (*model.TcPlugin, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcPlugin), nil
	}
}

func (t tcPluginDo) Find() ([]*model.TcPlugin, error) {
	result, err := t.DO.Find()
	return result.([]*model.TcPlugin), err
}

func (t tcPluginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TcPlugin, err error) {
	buf := make([]*model.TcPlugin, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tcPluginDo) FindInBatches(result *[]*model.TcPlugin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tcPluginDo) Attrs(attrs ...field.AssignExpr) *tcPluginDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tcPluginDo) Assign(attrs ...field.AssignExpr) *tcPluginDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tcPluginDo) Joins(fields ...field.RelationField) *tcPluginDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tcPluginDo) Preload(fields ...field.RelationField) *tcPluginDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tcPluginDo) FirstOrInit() (*model.TcPlugin, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcPlugin), nil
	}
}

func (t tcPluginDo) FirstOrCreate() (*model.TcPlugin, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcPlugin), nil
	}
}

func (t tcPluginDo) FindByPage(offset int, limit int) (result []*model.TcPlugin, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tcPluginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tcPluginDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tcPluginDo) Delete(models ...*model.TcPlugin) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tcPluginDo) withDO(do gen.Dao) *tcPluginDo {
	t.DO = *do.(*gen.DO)
	return t
}
