// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/BANKA2017/tbsign_go/dao/model"
)

func newTcCron(db *gorm.DB, opts ...gen.DOOption) tcCron {
	_tcCron := tcCron{}

	_tcCron.tcCronDo.UseDB(db, opts...)
	_tcCron.tcCronDo.UseModel(&model.TcCron{})

	tableName := _tcCron.tcCronDo.TableName()
	_tcCron.ALL = field.NewAsterisk(tableName)
	_tcCron.Name = field.NewString(tableName, "name")
	_tcCron.Orde = field.NewInt32(tableName, "orde")
	_tcCron.File = field.NewString(tableName, "file")
	_tcCron.No = field.NewInt32(tableName, "no")
	_tcCron.Desc = field.NewString(tableName, "desc")
	_tcCron.Freq = field.NewInt32(tableName, "freq")
	_tcCron.Lastdo = field.NewInt32(tableName, "lastdo")
	_tcCron.Log = field.NewString(tableName, "log")

	_tcCron.fillFieldMap()

	return _tcCron
}

type tcCron struct {
	tcCronDo tcCronDo

	ALL    field.Asterisk
	Name   field.String
	Orde   field.Int32
	File   field.String
	No     field.Int32
	Desc   field.String
	Freq   field.Int32
	Lastdo field.Int32
	Log    field.String

	fieldMap map[string]field.Expr
}

func (t tcCron) Table(newTableName string) *tcCron {
	t.tcCronDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tcCron) As(alias string) *tcCron {
	t.tcCronDo.DO = *(t.tcCronDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tcCron) updateTableName(table string) *tcCron {
	t.ALL = field.NewAsterisk(table)
	t.Name = field.NewString(table, "name")
	t.Orde = field.NewInt32(table, "orde")
	t.File = field.NewString(table, "file")
	t.No = field.NewInt32(table, "no")
	t.Desc = field.NewString(table, "desc")
	t.Freq = field.NewInt32(table, "freq")
	t.Lastdo = field.NewInt32(table, "lastdo")
	t.Log = field.NewString(table, "log")

	t.fillFieldMap()

	return t
}

func (t *tcCron) WithContext(ctx context.Context) *tcCronDo { return t.tcCronDo.WithContext(ctx) }

func (t tcCron) TableName() string { return t.tcCronDo.TableName() }

func (t tcCron) Alias() string { return t.tcCronDo.Alias() }

func (t tcCron) Columns(cols ...field.Expr) gen.Columns { return t.tcCronDo.Columns(cols...) }

func (t *tcCron) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tcCron) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["name"] = t.Name
	t.fieldMap["orde"] = t.Orde
	t.fieldMap["file"] = t.File
	t.fieldMap["no"] = t.No
	t.fieldMap["desc"] = t.Desc
	t.fieldMap["freq"] = t.Freq
	t.fieldMap["lastdo"] = t.Lastdo
	t.fieldMap["log"] = t.Log
}

func (t tcCron) clone(db *gorm.DB) tcCron {
	t.tcCronDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tcCron) replaceDB(db *gorm.DB) tcCron {
	t.tcCronDo.ReplaceDB(db)
	return t
}

type tcCronDo struct{ gen.DO }

func (t tcCronDo) Debug() *tcCronDo {
	return t.withDO(t.DO.Debug())
}

func (t tcCronDo) WithContext(ctx context.Context) *tcCronDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tcCronDo) ReadDB() *tcCronDo {
	return t.Clauses(dbresolver.Read)
}

func (t tcCronDo) WriteDB() *tcCronDo {
	return t.Clauses(dbresolver.Write)
}

func (t tcCronDo) Session(config *gorm.Session) *tcCronDo {
	return t.withDO(t.DO.Session(config))
}

func (t tcCronDo) Clauses(conds ...clause.Expression) *tcCronDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tcCronDo) Returning(value interface{}, columns ...string) *tcCronDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tcCronDo) Not(conds ...gen.Condition) *tcCronDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tcCronDo) Or(conds ...gen.Condition) *tcCronDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tcCronDo) Select(conds ...field.Expr) *tcCronDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tcCronDo) Where(conds ...gen.Condition) *tcCronDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tcCronDo) Order(conds ...field.Expr) *tcCronDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tcCronDo) Distinct(cols ...field.Expr) *tcCronDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tcCronDo) Omit(cols ...field.Expr) *tcCronDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tcCronDo) Join(table schema.Tabler, on ...field.Expr) *tcCronDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tcCronDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tcCronDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tcCronDo) RightJoin(table schema.Tabler, on ...field.Expr) *tcCronDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tcCronDo) Group(cols ...field.Expr) *tcCronDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tcCronDo) Having(conds ...gen.Condition) *tcCronDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tcCronDo) Limit(limit int) *tcCronDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tcCronDo) Offset(offset int) *tcCronDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tcCronDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tcCronDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tcCronDo) Unscoped() *tcCronDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tcCronDo) Create(values ...*model.TcCron) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tcCronDo) CreateInBatches(values []*model.TcCron, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tcCronDo) Save(values ...*model.TcCron) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tcCronDo) First() (*model.TcCron, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcCron), nil
	}
}

func (t tcCronDo) Take() (*model.TcCron, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcCron), nil
	}
}

func (t tcCronDo) Last() (*model.TcCron, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcCron), nil
	}
}

func (t tcCronDo) Find() ([]*model.TcCron, error) {
	result, err := t.DO.Find()
	return result.([]*model.TcCron), err
}

func (t tcCronDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TcCron, err error) {
	buf := make([]*model.TcCron, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tcCronDo) FindInBatches(result *[]*model.TcCron, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tcCronDo) Attrs(attrs ...field.AssignExpr) *tcCronDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tcCronDo) Assign(attrs ...field.AssignExpr) *tcCronDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tcCronDo) Joins(fields ...field.RelationField) *tcCronDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tcCronDo) Preload(fields ...field.RelationField) *tcCronDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tcCronDo) FirstOrInit() (*model.TcCron, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcCron), nil
	}
}

func (t tcCronDo) FirstOrCreate() (*model.TcCron, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TcCron), nil
	}
}

func (t tcCronDo) FindByPage(offset int, limit int) (result []*model.TcCron, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tcCronDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tcCronDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tcCronDo) Delete(models ...*model.TcCron) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tcCronDo) withDO(do gen.Dao) *tcCronDo {
	t.DO = *do.(*gen.DO)
	return t
}
