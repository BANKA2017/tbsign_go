name: Build

on:
  workflow_dispatch:

concurrency:
  group: build-all-${{ github.ref }}
  cancel-in-progress: true

env:
  NUXT_BASE_PATH: "/api"
  NUXT_USE_COOKIE_TOKEN: "1"
  CGO_ENABLED: "1"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-24.04
    outputs:
      fe_commit_hash: ${{ steps.build-fe.outputs.fe_commit_hash }}
    steps:
      - name: Clone repo
        run: git clone https://github.com/BANKA2017/tbsign_go_fe

      - uses: actions/setup-node@v4
        name: Setup Node
        with:
          node-version: 22
          cache: "yarn"
          cache-dependency-path: tbsign_go_fe/yarn.lock

      - name: Frontend
        id: build-fe
        run: |
          cd tbsign_go_fe
          fe_commit_hash=$(git rev-parse HEAD)
          export NUXT_COMMIT_HASH=$fe_commit_hash
          echo "fe_commit_hash=${fe_commit_hash}" >> "$GITHUB_OUTPUT"
          yarn install
          yarn run postinstall
          yarn run generate

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: "tbsign_go.fe"
          path: tbsign_go_fe/.output/public/
          include-hidden-files: true
          compression-level: 9

  build:
    runs-on: ubuntu-24.04
    name: Build
    permissions:
      contents: write
    needs:
      - build-frontend
      - build-linux-binary
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - uses: actions/download-artifact@v4
        with:
          name: tbsign_go.fe
          path: assets/dist
      - uses: actions/download-artifact@v4
        with:
          pattern: tbsign_go.musl.*.binary

      - name: Init env
        run: |
          mkdir build
          fe_commit_hash=${{ needs.build-frontend.outputs.fe_commit_hash }}
          echo "fe_commit_hash=${fe_commit_hash}" >> "$GITHUB_ENV"
          commit_hash=$(git rev-parse HEAD)
          echo "commit_hash=${commit_hash}" >> "$GITHUB_ENV"
          short_commit_hash=${commit_hash:0:7}
          short_fe_commit_hash=${fe_commit_hash:0:7}
          build_prefix="tbsign_go.$(date +'%+4Y%m%d').$short_commit_hash.$short_fe_commit_hash"
          echo "build_prefix=${build_prefix}" >> "$GITHUB_ENV"
          build_at="$(date -Iseconds)"
          echo "build_at=${build_at}" >> "$GITHUB_ENV"
          go_runtime=$(go version | sed 's/go version go[0-9]*\.[0-9]*\.[0-9]* //')
          echo "go_runtime=${go_runtime}" >> "$GITHUB_ENV"
      - name: Install tools
        run: |
          go install src.techknowlogick.com/xgo@v1.8.1-0.20250401170454-4b368d8a5afa
          docker pull ghcr.io/techknowlogick/xgo:go-1.24.2
          curl -o assets/ca/cacert.pem https://curl.se/ca/cacert.pem
          rm assets/ca/.gitkeep
      - name: Packaging frontend
        run: tar -czf tcfe.tar.gz -C assets/dist/ .
      - uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"
          cache-dependency-path: "go.sum"
      - name: Rename Linux binary
        run: |
          mv "tbsign_go.musl.amd64.binary/tbsign_go" "build/${build_prefix}.linux-amd64"
          mv "tbsign_go.musl.arm64.binary/tbsign_go" "build/${build_prefix}.linux-arm64"

      - name: Backend
        run: |
          cd build
          PUBLISH_TYPE=binary
          ldflags="\
          -X 'github.com/BANKA2017/tbsign_go/share.BuiltAt=$build_at' \
          -X 'github.com/BANKA2017/tbsign_go/share.BuildRuntime=$go_runtime' \
          -X 'github.com/BANKA2017/tbsign_go/share.BuildGitCommitHash=$commit_hash' \
          -X 'github.com/BANKA2017/tbsign_go/share.BuildEmbeddedFrontendGitCommitHash=$fe_commit_hash' \
          -X 'github.com/BANKA2017/tbsign_go/share.BuildPublishType=$PUBLISH_TYPE' \
          "
          $HOME/go/bin/xgo -go go-1.24.2 -out "$build_prefix" -ldflags "$ldflags" -tags netgo --targets=windows/amd64,darwin/amd64,darwin/arm64 ../

      - name: Rename & SHA-256
        run: |
          mv "build/${build_prefix}-windows-4.0-amd64.exe" "build/${build_prefix}.windows-amd64.exe"
          echo "$(sha256sum build/${build_prefix}.windows-amd64.exe | awk '{print $1}')" >> "build/${build_prefix}.windows-amd64.exe.sha256"
          echo "windows_amd64_sha256=$(cat build/${build_prefix}.windows-amd64.exe.sha256)" >> "$GITHUB_ENV"

          mv "build/${build_prefix}-linux-arm64" "build/${build_prefix}.linux-arm64"
          echo "$(sha256sum build/${build_prefix}.linux-arm64 | awk '{print $1}')" >> "build/${build_prefix}.linux-arm64.sha256"
          echo "linux_arm64_sha256=$(cat build/${build_prefix}.linux-arm64.sha256)" >> "$GITHUB_ENV"

          mv "build/${build_prefix}-linux-amd64" "build/${build_prefix}.linux-amd64"
          echo "$(sha256sum build/${build_prefix}.linux-amd64 | awk '{print $1}')" >> "build/${build_prefix}.linux-amd64.sha256"
          echo "linux_amd64_sha256=$(cat build/${build_prefix}.linux-amd64.sha256)" >> "$GITHUB_ENV"

          mv "build/${build_prefix}-darwin-10.12-arm64" "build/${build_prefix}.darwin-arm64"
          echo "$(sha256sum build/${build_prefix}.darwin-arm64 | awk '{print $1}')" >> "build/${build_prefix}.darwin-arm64.sha256"
          echo "darwin_arm64_sha256=$(cat build/${build_prefix}.darwin-arm64.sha256)" >> "$GITHUB_ENV"

          mv "build/${build_prefix}-darwin-10.12-amd64" "build/${build_prefix}.darwin-amd64"
          echo "$(sha256sum build/${build_prefix}.darwin-amd64 | awk '{print $1}')" >> "build/${build_prefix}.darwin-amd64.sha256"
          echo "darwin_amd64_sha256=$(cat build/${build_prefix}.darwin-amd64.sha256)" >> "$GITHUB_ENV"

          mv "tcfe.tar.gz" "build/${build_prefix}.fe.tar.gz"
          echo "$(sha256sum build/${build_prefix}.fe.tar.gz | awk '{print $1}')" >> "build/${build_prefix}.fe.tar.gz.sha256"
          echo "fe_sha256=$(cat build/${build_prefix}.fe.tar.gz.sha256)" >> "$GITHUB_ENV"

      # - name: Upload package
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: 'tbsign_go.all'
      #     path: build/*
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: build/*
          prerelease: true
          fail_on_unmatched_files: true
          tag_name: ${{ env.build_prefix }}
          body: |
            ```yaml
            build_runtime: ${{ env.go_runtime }}
            build_at: ${{ env.build_at }}
            commit_hash: ${{ env.commit_hash }}
            frontend_hash: ${{ env.fe_commit_hash }}
            publish_type: binary
            version: ${{ env.build_prefix }}
            sha256:
              linux_arm64: ${{ env.linux_arm64_sha256 }}
              linux_amd64: ${{ env.linux_amd64_sha256 }}
              darwin_arm64: ${{ env.darwin_arm64_sha256 }}
              darwin_amd64: ${{ env.darwin_amd64_sha256 }}
              windows_amd64: ${{ env.windows_amd64_sha256 }}
              frontend: ${{ env.fe_sha256 }}
            ```

  build-linux-binary:
    name: Build Binary for ${{ matrix.arch.name }}/${{ matrix.publish_type }}
    strategy:
      matrix:
        arch:
          - name: arm64
            runs-on: ubuntu-24.04-arm
            compiler: /usr/bin/aarch64-linux-musl-gcc
          - name: amd64
            runs-on: ubuntu-24.04
            compiler: /usr/bin/x86_64-linux-musl-gcc
        publish_type: [binary, docker]
    runs-on: ${{ matrix.arch.runs-on }}
    needs: build-frontend
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - uses: actions/download-artifact@v4
        with:
          name: tbsign_go.fe
          path: assets/dist
      - uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"
          cache-dependency-path: "go.sum"
      - name: Install musl libc
        run: sudo apt install -y musl-dev
      - name: Backend
        run: |
          curl -o assets/ca/cacert.pem https://curl.se/ca/cacert.pem
          rm assets/ca/.gitkeep
          fe_commit_hash=${{ needs.build-frontend.outputs.fe_commit_hash }}
          commit_hash=$(git rev-parse HEAD)
          short_commit_hash=${commit_hash:0:7}
          short_fe_commit_hash=${fe_commit_hash:0:7}
          build_prefix="tbsign_go.$(date +'%+4Y%m%d').$short_commit_hash.$short_fe_commit_hash"
          echo "build_prefix=${build_prefix}" >> "$GITHUB_ENV"
          build_at="$(date -Iseconds)"
          go_runtime=$(go version | sed 's/go version go[0-9]*\.[0-9]*\.[0-9]* //')
          PUBLISH_TYPE=${{ matrix.publish_type }}
          ldflags="\
          -X 'github.com/BANKA2017/tbsign_go/share.BuiltAt=$build_at' \
          -X 'github.com/BANKA2017/tbsign_go/share.BuildRuntime=$go_runtime' \
          -X 'github.com/BANKA2017/tbsign_go/share.BuildGitCommitHash=$commit_hash' \
          -X 'github.com/BANKA2017/tbsign_go/share.BuildEmbeddedFrontendGitCommitHash=$fe_commit_hash' \
          -X 'github.com/BANKA2017/tbsign_go/share.BuildPublishType=$PUBLISH_TYPE' \
          -linkmode external -extldflags -static
          "
          CC=${{ matrix.arch.compiler }} go build -ldflags "$ldflags" -tags netgo

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: "tbsign_go.musl.${{ matrix.arch.name }}.${{ matrix.publish_type }}"
          path: tbsign_go

  combine-docker:
    name: Docker Build
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    needs:
      - build-linux-binary
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - uses: actions/download-artifact@v4
        with:
          pattern: tbsign_go.musl.*.docker

      # - name: Set Date Tag
      #   run: echo "DATE_TAG=$(date +'%Y%m%d')" >> "$GITHUB_ENV"

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set Up Cache
        uses: actions/cache@v4
        id: buildx-cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx

      - name: Buildx
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
